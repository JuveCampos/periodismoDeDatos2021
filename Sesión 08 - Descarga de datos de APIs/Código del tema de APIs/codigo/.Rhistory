library(pacman)
p_load(tidyverse, spotifyr, ggradar)
source("02_Codigo/credenciales.R")
Sys.setenv(SPOTIFY_CLIENT_ID = client)
Sys.setenv(SPOTIFY_CLIENT_SECRET = secret)
client
secret
source("02_Codigo/credenciales.R")
# Defino mis credenciales en las variables del Sistema
Sys.setenv(SPOTIFY_CLIENT_ID = client)
Sys.setenv(SPOTIFY_CLIENT_SECRET = secret)
# Con las credenciales, genero el token a traves de la funcion del cliente.
access_token <- get_spotify_access_token()
info_musico$track_name
info_musico$available_markets[[1]]
seriesBanxico <- tibble::tribble(
~Clave, ~Significado,
"SF43707", "Reservas Internacionales.",
"SF61745", "Tasa objetivo",
"SF60648", "TIIE a 28 días.",
"SF60649", "TIIE a 91 días.",
"SF60633", "Cetes a 28 días.",
"SF43718", "Pesos por Dólar. FIX.",
"SF60653", "Pesos por Dólar. Fecha de liquidación.",
"SF46410", "Euro.",
"SF46406", "Yen japonés.",
"SF46407", "Libra esterlina.",
"SF60632", "Dólar Canadiense.",
"SP68257", "Valor de UDIS."
)
# Definimos una serie de interés: "Pesos por Dólar. FIX."
interes <- "SF43718"
# Declaro mi token:
toquen <- "c5d4142336636d56419e920e6ff7a7a29a4c466f46bb6f41f04a9bd2c9fbcaf3"
# Genero mi enlace de llamada
query <- paste0("https://www.banxico.org.mx/SieAPIRest/service/v1/series/",
interes, "/datos/oportuno",
"?token=", toquen
)
llamada <- GET(query)
# Librerias
library(jsonlite)
library(httr)
library(tidyverse)
seriesBanxico <- tibble::tribble(
~Clave, ~Significado,
"SF43707", "Reservas Internacionales.",
"SF61745", "Tasa objetivo",
"SF60648", "TIIE a 28 días.",
"SF60649", "TIIE a 91 días.",
"SF60633", "Cetes a 28 días.",
"SF43718", "Pesos por Dólar. FIX.",
"SF60653", "Pesos por Dólar. Fecha de liquidación.",
"SF46410", "Euro.",
"SF46406", "Yen japonés.",
"SF46407", "Libra esterlina.",
"SF60632", "Dólar Canadiense.",
"SP68257", "Valor de UDIS."
)
# Definimos una serie de interés: "Pesos por Dólar. FIX."
interes <- "SF43718"
# Declaro mi token:
toquen <- "c5d4142336636d56419e920e6ff7a7a29a4c466f46bb6f41f04a9bd2c9fbcaf3"
# Genero mi enlace de llamada
query <- paste0("https://www.banxico.org.mx/SieAPIRest/service/v1/series/",
interes, "/datos/oportuno",
"?token=", toquen
)
llamada <- GET(query)
llamada
class(llamada) # Tipo Response
# Llamada a la API
call1 <- paste0("https://pokeapi.co/api/v2/",
"pokemon/pikachu/")
# Realizamos la llamada (Obtenemos la respuesta)
llamada <- GET(call1)
llamada # Status 200: Todo ok.
class(llamada) # Tipo Response
# De la llamada, obtenemos la respuesta en formato JSON
# Formato JSON: https://en.wikipedia.org/wiki/JSON
get_data <- content(llamada, "text")
get_data
class(get_data)
# Del JSON, convertimos este texto en un objeto lista
get_data_JSON <- fromJSON(get_data, flatten = TRUE)
class(get_data_JSON)
# Renombramos el objeto, por comodidad
a <- get_data_JSON
a
class(a)
# Habilidades
a$abilities
habilidades <- a$abilities
# Formas
a$forms
# Indices de los juegos
a$game_indices
# Items con los que viene
a$held_items$item.name # Nombres
a$held_items$version_details
# Sprites
a$base_experience
# IMAGENES ----
pm <- a$sprites$front_default # Frente Pikachu Macho
ph <- a$sprites$front_female  # Frente Pikachu Hembra
# Imprimimos imagen
image_read(pm) %>% print()
image_read(ph) %>% print()
library(magick)
image_read(pm) %>% print()
image_read(ph) %>% print()
image_read(pm) %>% print()
a$abilities
pokemon_de_interes <- "pikachu"
# Llamada a la API
call1 <- paste0("https://pokeapi.co/api/v2/",
"pokemon/", pokemon_de_interes, "/")
pokemon_de_interes <- "absol"
# Llamada a la API
call1 <- paste0("https://pokeapi.co/api/v2/",
"pokemon/", pokemon_de_interes, "/")
# Realizamos la llamada (Obtenemos la respuesta)
llamada <- GET(call1)
llamada # Status 200: Todo ok.
class(llamada) # Tipo Response
# De la llamada, obtenemos la respuesta en formato JSON
# Formato JSON: https://en.wikipedia.org/wiki/JSON
get_data <- content(llamada, "text")
get_data
class(get_data)
# Del JSON, convertimos este texto en un objeto lista
get_data_JSON <- fromJSON(get_data, flatten = TRUE)
class(get_data_JSON)
# Renombramos el objeto, por comodidad
a <- get_data_JSON
a
class(a)
# Habilidades
a$abilities
habilidades <- a$abilities
# Formas
a$forms
# Indices de los juegos
a$game_indices
# Items con los que viene
a$held_items$item.name # Nombres
a$held_items$version_details
# Sprites
a$base_experience
# IMAGENES ----
pm <- a$sprites$front_default # Frente Pikachu Macho
ph <- a$sprites$front_female  # Frente Pikachu Hembra
# Imprimimos imagen
image_read(pm) %>% print() # Imprime en el viewer una imagen de un pikachu macho
image_read(ph) %>% print() # Imprime en el viewer una imagen de un pikachu hembra (la diferencia está en la forma de la cola)
# Descargamos la imagen.
curl::curl_download(pm, "01_Datos/Pokemon/FotoPikachuHembra.png")
a$abilities
a$held_items$item.name # Nombre
a$base_experience
a$base_experience
pm <- a$sprites$front_default # Frente Pikachu Macho
query <- '"Sismo" min_faves:100 lang:es since:2021-03-18'
query
# Busqueda
# (Solo se pueden descargar 15,000 tweets cada 15 minutos)
bd <- search_tweets(query,  # Busqueda
n = 10000, # Numero Maximo de Tweets
include_rts = FALSE, # Incluir Rts
retryonratelimit = TRUE)
library(tidyverse)
library(rtweet)
# # Stream de tweets (para morelos)
stream_tweets <- stream_tweets(c(-99, 19, -98, 19),
timeout = 30)
stream_tweets
usa <- stream_tweets(
c(-125, 26, -65, 49),
timeout = 30
)
View(usa)
# # Stream de tweets (para morelos)
stream_tweets <- stream_tweets(c(-99.39, 19.04, -98.84, 19.58),
timeout = 30)
stream_tweets
View(stream_tweets)
?stream_tweets
# OTROS DATOS ----
# # Obtener a quienes sigue un usuario ----
juve_fds <- get_friends("JuvenalCamposF")
juve_fds
#
# ## Ver bien a los usuarios
juve_fds_data <- lookup_users(juve_fds$user_id)
juve_fds_data$screen_name
#
# ## Quien sigue al usuario ----
# ## get user IDs of accounts following CNN
juve_flw <- get_followers("JuvenalCamposF", n = 75000)
#
# ## lookup data on those accounts
juve_flw_data <- lookup_users(juve_flw$user_id)
juve_flw_data$screen_name
#
# # Likes y Favs
juveFavs <- get_favorites("JuvenalCamposF", n = 100)
juveFavs
#
juveFaves <- juveFavs %>%
select(screen_name, text, created_at) %>%
arrange(created_at) %>%
mutate(Fecha = as.Date(created_at)) %>%
group_by(Fecha) %>%
count() %>%
ggplot(aes(x = Fecha, y = n)) +
geom_col()
juveFaves
plotly::ggplotly(juveFaves)
get_retweets
?get_retweets()
rtweet::get_collections("JuvenalCamposF")
rtweet::get_collections("JuvenalCamposF")
datos = rtweet::get_collections("JuvenalCamposF")
datos$objects$users$`260088313`$screen_name
datos
datos$response
datos$response$results
datos$response$cursors
datos$response$results
datos$objects$users
datos$objects$users[[1]]
datos$objects$users[[1]][1]
id = datos$objects$users[[1]][1]
id
class(id)
datos$objects$users[id]
datos$objects$users[[id]]
id
class(id)
id = datos$objects$users[[1]][1] %>% unlist()
id
datos$objects$users[[id]]
class(id)
datos$objects$users[[id]]
datos$objects$users[[as.character(id)]]
datos$objects$users[[as.character(id)]]$description
datos$objects$users[[id]]$description
id = datos$objects$users[[1]][1] %>%
unlist() %>%
as.character()
datos$objects$users[[id]]$description
# Datos de usuario -----
datos = rtweet::get_collections("elmemoflores")
id = datos$objects$users[[1]][1] %>%
unlist() %>%
as.character()
# Obtener la descripción de la bio
datos$objects$users[[id]]$description
datos = rtweet::get_collections("elmemoflores")
datos
# Datos de usuario -----
datos = rtweet::get_collections("claudiodanielpc")
datos
# Datos de usuario -----
datos = rtweet::get_collections("JuvenalCamposF")
datos
id = datos$objects$users[[1]][1] %>%
unlist() %>%
as.character()
# Obtener la descripción de la bio
datos$objects$users[[id]]$description
# Datos de usuario -----
datos = rtweet::get_collections("LNPP_MX")
datos
datos$objects$users
# Datos de usuario -----
datos = rtweet::get_collections("@LNPP_MX")
datos = rtweet::get_collections("LNPP_MX")
id = datos$objects$users[[1]][1] %>%
unlist() %>%
as.character()
# Obtener la descripción de la bio
datos$objects$users[[id]]$description
cuenta = "JuvenalCamposF"
datos = rtweet::get_collections("LNPP_MX")
id = datos$objects$users[[1]][1] %>%
unlist() %>%
as.character()
id
datos = rtweet::get_collections(cuenta)
id = datos$objects$users[[1]][1] %>%
unlist() %>%
as.character()
id
# Datos de usuario -----
cuenta = "natto94"
datos = rtweet::get_collections(cuenta)
id = datos$objects$users[[1]][1] %>%
unlist() %>%
as.character()
id
cuenta = "JuvenalCamposF"
cuenta
# Datos de usuario -----
cuenta = "LNPP_MX"
datos = rtweet::get_collections(cuenta)
id = datos$objects$users[[1]][1] %>%
unlist() %>%
as.character()
id
# Obtener la descripción de la bio
datos$objects$users[[id]]$description
# # Obtener a quienes sigue un usuario ----
juve_fds <- get_friends("JuvenalCamposF")
juve_fds
juve_fds <- get_friends(cuenta)
juve_fds
#
# ## Ver bien a los usuarios a los que sigues
juve_fds_data <- lookup_users(juve_fds$user_id)
juve_fds_data$screen_name
#
# ## Quien sigue al usuario ----
# ## get user IDs of accounts following CNN
juve_flw <- get_followers("JuvenalCamposF", n = 75000)
#
# ## checar bien los usuarios
juve_flw_data <- lookup_users(juve_flw$user_id)
juve_flw_data$screen_name
cuenta = "JuvenalCamposF"
datos = rtweet::get_collections(cuenta)
id = datos$objects$users[[1]][1] %>%
unlist() %>%
as.character()
id
# Obtener la descripción de la bio
datos$objects$users[[id]]$description
#
# # Likes y Favs
le_gusta_al_usuario <- get_favorites(cuenta, n = 100)
# Gráfica para practicar con la informacion
juveFaves <- juveFavs %>%
select(screen_name, text, created_at) %>%
arrange(created_at) %>%
mutate(Fecha = as.Date(created_at)) %>%
group_by(Fecha) %>%
count() %>%
ggplot(aes(x = Fecha, y = n)) +
geom_col()
juveFaves
cuenta
# Gráfica para practicar con la informacion
favs_plot <- le_gusta_al_usuario %>%
select(screen_name, text, created_at) %>%
arrange(created_at) %>%
mutate(Fecha = as.Date(created_at)) %>%
group_by(Fecha) %>%
count() %>%
ggplot(aes(x = Fecha, y = n)) +
geom_col() +
labs(title = cuenta,
subtitle = "Número de likes por día del usuario")
favs_plot
# Gráfica para practicar con la informacion
favs_plot <- le_gusta_al_usuario %>%
select(screen_name, text, created_at) %>%
arrange(created_at) %>%
mutate(Fecha = as.Date(created_at)) %>%
group_by(Fecha) %>%
count() %>%
ggplot(aes(x = Fecha, y = n)) +
geom_col() +
labs(title = str_c("@", cuenta),
subtitle = "Número de likes por día del usuario")
favs_plot
# Versión interactiva
plotly::ggplotly(favs_plot) # ¿Que día tuve más actividad?
# Hacemos el mapa ----
leaflet(disponibilidad_actual) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircleMarkers(opacity = 1,
fillOpacity = 1,
color = pal(disponibilidad_actual$grado_disponibilidad),
radius = 2,
label = disponibilidad_actual$grado_disponibilidad)
getwd()
